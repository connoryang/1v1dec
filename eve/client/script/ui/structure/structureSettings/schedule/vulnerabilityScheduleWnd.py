#Embedded file name: e:\jenkins\workspace\client_SERENITY\branches\release\SERENITY\eve\client\script\ui\structure\structureSettings\schedule\vulnerabilityScheduleWnd.py
import carbonui.const as uiconst
from carbonui.primitives.container import Container
from carbonui.primitives.containerAutoSize import ContainerAutoSize
from carbonui.primitives.gridcontainer import GridContainer
from carbonui.primitives.sprite import Sprite
from eve.client.script.ui.control.buttonGroup import ButtonGroup
from eve.client.script.ui.control.eveLabel import EveLabelLarge, EveLabelMedium
from eve.client.script.ui.control.eveWindow import Window
from eve.client.script.ui.control.themeColored import LineThemeColored
from eve.client.script.ui.structure import ChangeSignalConnect
from eve.client.script.ui.structure.deployment.deploymentCont import MouseCont
from eve.client.script.ui.structure.structureSettings.schedule.schedulePickeCombo import PickerCombo
from eve.client.script.ui.structure.structureSettings.schedule.vulnerabilitySchedule import VulnerabilitySchedulerWithReinforcement
from eve.client.script.ui.structure.structureSettings.schedule.vulnerabilitySchedulePicker import SchedulePicker
from localization import GetByLabel
import structures

class VulnerabilityScheduleWnd(Window):
    default_width = 800
    default_height = 600
    default_minSize = (600, 400)
    default_topParentHeight = 0
    default_captionLabelPath = 'UI/Structures/Deployment/EditVulnerabilityHeader'

    def ApplyAttributes(self, attributes):
        Window.ApplyAttributes(self, attributes)
        self.requiredHours = attributes.requiredHours
        infoOnStructures = attributes.infoOnStructures
        self.infoOnStructures = attributes.infoOnStructures
        self.itemIDsAndSolarsystemIDs = {(x[0], x[1]) for x in infoOnStructures}
        self.schedulePicker = SchedulePicker(requiredHours=self.requiredHours)
        self.commonlyUsedPickedCB = None
        self.inUsePickerCB = None
        thisWeek, nextWeek = self.GetWeekSchedules(infoOnStructures)
        self.BuildUI(thisWeek, nextWeek)

    def BuildUI(self, thisWeek, nextWeek):
        self.topCont = ContainerAutoSize(name='topCont', parent=self.sr.main, alignMode=uiconst.TOTOP, align=uiconst.TOTOP, padTop=6)
        LineThemeColored(parent=self.topCont, align=uiconst.TOBOTTOM)
        self.topCont.GetAutoSize = self.GetTopContAutoSize
        self.comboCont = Container(parent=self.topCont, align=uiconst.TORIGHT)
        text = GetByLabel('UI/Structures/Deployment/ModifyingVulnerabilitySchedule', count=len(self.infoOnStructures))
        EveLabelLarge(parent=self.topCont, align=uiconst.TOTOP, left=10, top=4, text=text)
        self.AddCombos()
        btnGroup = ButtonGroup(parent=self.sr.main, idx=0)
        saveBtn = btnGroup.AddButton(GetByLabel('UI/Common/Buttons/Save'), func=self.Save)
        parent = Container(parent=self.sr.main, padding=(10, 10, 10, 0))
        mouseParent = Container(parent=parent, align=uiconst.TOBOTTOM, height=46)
        mouseCont = MouseCont(parent=mouseParent, inMoveMode=False, align=uiconst.TORIGHT_PROP, width=0.5)
        labelCont = GridContainer(parent=parent, align=uiconst.TOTOP, columns=2, lines=1, height=30)
        lableSubCont1 = Container(parent=labelCont)
        lableSubCont2 = Container(parent=labelCont)
        EveLabelMedium(parent=lableSubCont1, text=GetByLabel('UI/StructureProfiles/ThisWeek'), align=uiconst.CENTERLEFT)
        EveLabelMedium(parent=lableSubCont2, text=GetByLabel('UI/StructureProfiles/NextWeek'), align=uiconst.CENTERLEFT)
        self.leftSide = Container(parent=parent, width=0.5, align=uiconst.TOLEFT_PROP)
        self.rightSide = Container(parent=parent, align=uiconst.TOALL)
        thisWeekSchedule = structures.Schedule(thisWeek, required=self.requiredHours)
        w1 = VulnerabilitySchedulerWithReinforcement(parent=self.leftSide, canModify=False, schedule=thisWeekSchedule, frame=False, padRight=10)
        Sprite(name='lock', parent=w1.weekContParent, pos=(0, 0, 54, 64), align=uiconst.CENTER, texturePath='res:/UI/Texture/Classes/StructureDeployment/lock.png', state=uiconst.UI_DISABLED)
        w1.opacity = 0.3
        self.nextWeekSchedule = structures.Schedule(nextWeek, required=self.requiredHours)
        self.w2 = VulnerabilitySchedulerWithReinforcement(parent=self.rightSide, canModify=True, schedule=self.nextWeekSchedule, frame=False, padRight=10)
        self.ChangeSignalConnection(connect=True)

    def AddCombos(self):
        scheduleOptions = [(GetByLabel('UI/Structures/Deployment/CommonlyUsedSchedules'), 0)]
        scheduleOptions += self.schedulePicker.GetScheduleOptionList()
        self.commonlyUsedPickedCB = PickerCombo(label='', parent=self.comboCont, options=scheduleOptions, name='commonlyUsedPicked', callback=self.ChangeSchedule, align=uiconst.TOPRIGHT, left=10)
        comboContWidth = self.commonlyUsedPickedCB.left + self.commonlyUsedPickedCB.width
        currentSchedules = self.schedulePicker.GetSelectedSchedulesOptionList(self.infoOnStructures)
        if currentSchedules:
            scheduleOptions = [(GetByLabel('UI/Structures/Deployment/CurrentSchedules'), 0)] + currentSchedules
            left = self.commonlyUsedPickedCB.left + self.commonlyUsedPickedCB.width + 10
            self.inUsePickerCB = PickerCombo(label='', parent=self.comboCont, options=scheduleOptions, name='inUsePickerCB', callback=self.ChangeSchedule, align=uiconst.TOPRIGHT, left=left)
            comboContWidth = self.inUsePickerCB.left + self.inUsePickerCB.width
        self.comboCont.width = comboContWidth

    def ChangeSignalConnection(self, connect = True):
        signalAndCallback = [(self.nextWeekSchedule.OnChange, self.OnScheduleChanged)]
        ChangeSignalConnect(signalAndCallback, connect)

    def ChangeSchedule(self, combo, key, val):
        if val == 0:
            return
        self.OnEntryClicked(val)

    def OnEntryClicked(self, vulnerableHours, *args):
        self.nextWeekSchedule.SetVulnerableHours(vulnerableHours)
        self.w2.UpdateView()

    def GetWeekSchedules(self, infoOnStructures):
        thisWeekSchedules = {x[2] for x in infoOnStructures}
        nextWeekSchedules = {x[3] for x in infoOnStructures}
        thisWeek = thisWeekSchedules.pop() if len(thisWeekSchedules) == 1 else None
        nextWeek = nextWeekSchedules.pop() if len(nextWeekSchedules) == 1 else None
        return (thisWeek, nextWeek)

    def Save(self, *args):
        newSchedule = int(self.nextWeekSchedule)
        if not self.nextWeekSchedule.IsAllocated():
            print 'warning'
            return
        sm.RemoteSvc('structureVulnerability').UpdateScheduleFromClient(self.itemIDsAndSolarsystemIDs, newSchedule)
        self.Close()

    def OnScheduleChanged(self, schedule, *args):
        scheduleValue = int(schedule)
        for combo in (self.commonlyUsedPickedCB, self.inUsePickerCB):
            if combo and combo.GetValue() != scheduleValue:
                combo.SelectItemByIndex(0)

    def GetTopContAutoSize(self):
        w, h = ContainerAutoSize.GetAutoSize(self.topCont)
        return (w, max(h + 6, 40))

    def Close(self, *args, **kwargs):
        try:
            self.ChangeSignalConnection(connect=False)
        except Exception as e:
            log.Log
        finally:
            Window.Close(self, *args, **kwargs)
