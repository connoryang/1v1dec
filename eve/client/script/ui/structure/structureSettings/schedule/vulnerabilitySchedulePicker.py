#Embedded file name: e:\jenkins\workspace\client_SERENITY\branches\release\SERENITY\eve\client\script\ui\structure\structureSettings\schedule\vulnerabilitySchedulePicker.py
from collections import Counter
from brennivin.itertoolsext import Bundle
import carbonui.const as uiconst
from carbonui.control.scrollContainer import ScrollContainer
from carbonui.primitives.container import Container
from eve.client.script.ui.control.eveLabel import EveLabelMedium
from eve.client.script.ui.structure.scheduleUtil import GetUniqueSchedules
from eve.client.script.ui.structure.structureSettings.schedule.smallSchedule import SmallSchedule
from localization import GetByLabel
from sovDashboard.sovStatusEntries import MouseInsideScrollEntry

class SchedulePicker(object):

    def __init__(self, requiredHours):
        self.requiredHours = requiredHours

    def GetScheduleOptionList(self):
        stuctureBrowserController = sm.GetService('structureControllers').GetStructureBrowserController()
        uniqueSchedules = stuctureBrowserController.GetUniqueSchedulesForCorpStructures()
        return self.GetOptionList(uniqueSchedules)

    def GetSelectedSchedulesOptionList(self, infoOnStructures):
        inUse = []
        for x in infoOnStructures:
            inUse.append(x[2])
            if x[2] != x[3]:
                inUse.append(x[3])

        uniqueSchedules = GetUniqueSchedules(inUse)
        return self.GetOptionList(uniqueSchedules)

    def GetOptionList(self, uniqueSchedules):
        schedulesWithSameHours = uniqueSchedules.get(self.requiredHours, None)
        if not schedulesWithSameHours:
            return []
        schedulesAndNumUsed = schedulesWithSameHours[:]
        schedulesAndNumUsed.sort(key=lambda x: x[0], reverse=True)
        optionList = []
        for numUse, schedule in schedulesAndNumUsed:
            inUseText = GetByLabel('UI/StructureSettings/AssignedToNumStructures', numStructures=numUse)
            optionList += [(inUseText, int(schedule))]

        return optionList


class ScheduleEntry(MouseInsideScrollEntry):
    default_height = SmallSchedule.default_height + 4
    default_align = uiconst.TOTOP
    default_state = uiconst.UI_NORMAL

    def ApplyAttributes(self, attributes):
        self.sr.node = attributes.node
        MouseInsideScrollEntry.ApplyAttributes(self, attributes)
        self.vulnerableHours = self.sr.node.vulnerableHours
        SmallSchedule(parent=self, align=uiconst.CENTERLEFT, vulnerableHours=self.vulnerableHours)
        text = self.sr.node.label
        inUseLabel = EveLabelMedium(parent=self, name='inUseLabel', align=uiconst.CENTERLEFT, left=55, text=text)

    def Load(self, *args):
        pass

    def OnClick(self, *args):
        self.ConstructHiliteFill()
        uicore.animations.BlinkOut(self._hiliteFill, startVal=self._hiliteFill.opacity, endVal=0.0, duration=0.1, loops=3, curveType=uiconst.ANIM_WAVE)
        if self.sr.get('node', None) and self.sr.node.get('OnClick', None):
            self.sr.node.OnClick(self)

    @staticmethod
    def GetDynamicHeight(node, width):
        return SmallSchedule.default_height + 4
